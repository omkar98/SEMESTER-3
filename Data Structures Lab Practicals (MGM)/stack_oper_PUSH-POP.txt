AIM: To implement stack data
structure and its Operations (i.e
PUSH and POP)
SYNTAX:
#include<stdio.h>
#include<conio.h>
# define MAX 5
/* Drawback: Only 5 elements can be
inserted at MAX in this array. We need
to use dynamic memory allocation, in
order to dynamically give size of array
at the time of execution. */
/* Global Declaration of variables */
int a[4],ch,n,top=-1,ele,i;
/* Push Function pushes the element in
stack. */
int push (int a[], int ele)
{
if(top==MAX-1)
{
printf("\nStack is full\n\n");
return (1);
}
else
{
++top;
a[top]=ele;
printf("%d is inserted\n", ele);
printf("Elements in stack are:\n ");
for(i=top;i>=0; i--)
{
printf("| %d |\n", a[i]);
}
return(0);
}
}
/* Pop Function pops out the top element
in stack */
void pop (int a[])
{
int x;
if(top==-1)
{
printf("\nStack is already
empty.\nPlease push an element first.\n");
}
else
{
x=a[top];
--top;
printf("%d is POPed out of
stack.\n",x);
if(top>=0)
{
printf("The element in the stack
are:");
for(i=top;i>=0; i--)
{
printf("\n| %d |\n", a[i]);
}

}
}
}
void main()
{
clrscr();
/* We use Goto statement to return back
to the main menu */
start:
printf("Select the operation you would like
to perform: ");
printf("\n\t[1]PUSH\n\t[2]POP\n\t[3]EXIT\
n");
printf("Your Choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1:
printf("Enter the element you want
to push in the stack: ");
scanf("%d", &ele);
push(a,ele);
goto start;
case 2:
pop(a);
goto start;
case 3: break;
default:
printf("\nPlease enter a valid input");
}
printf("Program Terminated\n");
getch();
}
===========OUTPUT==========

1. The user enters elements one by one
in the stack.
Your Choice: 1
Enter the element you want to push in
the stack: 33
33 is inserted
Elements in stack are:
| 33 |
| 20 |
| 22 |
| 45 |
| 23 |
Select the operation you would like to
perform:
[1]PUSH
[2]POP
[3]EXIT
Your Choice: 1
Enter the element you want to push in
the stack: 45

Stack is full

2. When the user wants to POP out all
the elements from the stack.
Your Choice: 2
45 is POPed out of stack.
The element in the stack are:
| 23 |
Select the operation you would like to
perform:
[1]PUSH
[2]POP
[3]EXIT
Your Choice: 2
23 is POPed out of stack.
Select the operation you would like to
perform:
[1]PUSH
[2]POP
[3]EXIT
Your Choice: 2

Stack is already empty.
Please push an element first.

3. Hence, Push and Pop operation is
done. The user decides to exit the
program:
Select the operation you would like to
perform:
[1]PUSH
[2]POP
[3]EXIT
Your Choice: 3
Program Terminated